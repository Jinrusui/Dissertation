"""Action Buffer for VLM World Model
====================
This module provides an ActionBuffer class that stores validated action plans with their scores.
When the buffer is not empty, actions will be popped from the buffer rather than generated by the agent.
"""

from __future__ import annotations
import logging
from typing import List, Dict, Any, Optional, Tuple
import heapq

logger = logging.getLogger("action_buffer")

from collections import deque
from typing import Optional, List

class ActionBuffer:
    """
    A simple buffer that stores a single action plan as a list.

    Each time a new plan is set, it replaces the old one. The buffer serves
    actions one by one from the front of the list.
    """

    def __init__(self):
        """Initializes an empty ActionBuffer."""
        self._plan_queue = deque()

    def set_plan(self, plan: List[str]):
        """
        Clears the buffer and sets a new plan.

        Args:
            plan: A list of action strings representing the new plan.
        """
        self._plan_queue = deque(plan)

    def get_action(self) -> Optional[str]:
        """
        Retrieves and removes the next action from the plan.

        Returns:
            The next action string, or None if the plan is empty.
        """
        if self.is_empty():
            return None
        return self._plan_queue.popleft()

    def is_empty(self) -> bool:
        """Checks if the buffer contains any actions."""
        return not self._plan_queue

    def clear(self):
        """Clears the current plan from the buffer."""
        self._plan_queue.clear()

    def get_buffer_status(self) -> dict:
        """
        Returns a dictionary representing the current state of the buffer.
        """
        current_plan = list(self._plan_queue)
        return {
            "size": len(current_plan),
            "actions_remaining": len(current_plan),
            "plan": current_plan,
        }